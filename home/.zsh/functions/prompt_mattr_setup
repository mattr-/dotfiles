# mattr prompt theme
# copied from grb prompt theme and modified

autoload -U zgitinit
zgitinit

prompt_mattr_help () {
  cat <<'EOF'

  prompt mattr

EOF
}

coloratom() {
	local off=$1 atom=$2
	if [[ $atom[1] == [[:upper:]] ]]; then
		off=$(( $off + 60 ))
	fi
	echo $(( $off + $colorcode[${(L)atom}] ))
}
colorword() {
	local fg=$1 bg=$2 att=$3
	local -a s

	if [ -n "$fg" ]; then
		s+=$(coloratom 30 $fg)
	fi
	if [ -n "$bg" ]; then
		s+=$(coloratom 40 $bg)
	fi
	if [ -n "$att" ]; then
		s+=$attcode[$att]
	fi

	echo "%{"$'\e['${(j:;:)s}m"%}"
}

function prompt_mattr_todo() {
  if $(which todo.sh &> /dev/null)
  then
      num=$(echo $(todo.sh ls $1 | wc -l))
      let todos=num-2
      if [ $todos != 0 ]
      then
          echo "$1: $todos"
      else
          echo ""
      fi
  else
      echo ""
  fi
}

prompt_mattr_setup() {
    local verbose
    if [[ $TERM == screen* ]] && [ -n "$STY" ]; then
      verbose=
    else
      verbose=1
    fi
  
    typeset -A colorcode
    colorcode[black]=0
    colorcode[red]=1
    colorcode[green]=2
    colorcode[yellow]=3
    colorcode[blue]=4
    colorcode[magenta]=5
    colorcode[cyan]=6
    colorcode[white]=7
    colorcode[default]=9
    colorcode[k]=$colorcode[black]
    colorcode[r]=$colorcode[red]
    colorcode[g]=$colorcode[green]
    colorcode[y]=$colorcode[yellow]
    colorcode[b]=$colorcode[blue]
    colorcode[m]=$colorcode[magenta]
    colorcode[c]=$colorcode[cyan]
    colorcode[w]=$colorcode[white]
    colorcode[.]=$colorcode[default]
  
    typeset -A attcode
    attcode[none]=00
    attcode[bold]=01
    attcode[faint]=02
    attcode[standout]=03
    attcode[underline]=04
    attcode[blink]=05
    attcode[reverse]=07
    attcode[conceal]=08
    attcode[normal]=22
    attcode[no-standout]=23
    attcode[no-underline]=24
    attcode[no-blink]=25
    attcode[no-reverse]=27
    attcode[no-conceal]=28
  
    local -A pc
    pc[default]='default'
    pc[date]='cyan'
    pc[time]='Blue'
    pc[host]='Green'
    pc[user]='cyan'
    pc[punc]='yellow'
    pc[line]='magenta'
    pc[hist]='green'
    pc[path]='Cyan'
    pc[shortpath]='default'
    pc[rc]='red'
    pc[scm_branch]='green'
    pc[scm_commitid]='Yellow'
    pc[scm_status_dirty]='Red'
    pc[scm_status_staged]='Green'
    pc[scm_time_short]='green'
    pc[scm_time_medium]='yellow'
    pc[scm_time_long]='red'
    pc[scm_time_uncommitted]='Magenta'
    pc[todo_count]='red'
    pc[#]='Yellow'
    for cn in ${(k)pc}; do
      pc[${cn}]=$(colorword $pc[$cn])
    done
    pc[reset]=$(colorword . . 00)

	typeset -Ag wunjo_prompt_colors
	wunjo_prompt_colors=(${(kv)pc})

	local p_date p_line p_rc

	p_date="$pc[date]%D{%Y-%m-%d} $pc[time]%D{%T}$pc[reset]"

	p_line="$pc[line]%y$pc[reset]"

	PROMPT=
	if [ $verbose ]; then
		PROMPT+="$pc[host]%m$pc[reset]"
	fi
	#PROMPT+="$pc[path]%(2~.%~.%/)$pc[reset]"
	#PROMPT+="\$(prompt_wunjo_scm_status)"
	#PROMPT+="%(?.. $pc[rc]exited %1v$pc[reset])"
#    PROMPT+="
#"
	#PROMPT+="($pc[hist]%h$pc[reset])"
	PROMPT+=":$pc[shortpath]%1~$pc[reset]"
    PROMPT+="($pc[scm_branch]%3v"
    PROMPT+="$pc[scm_status_staged]%4v"
    PROMPT+="$pc[scm_status_dirty]%5v"
    PROMPT+="$pc[reset])"
	PROMPT+=" $pc[#]\$$pc[reset] "

    #RPROMPT="$pc[rc]total%7v$pc[reset]  $pc[rc]%6v$pc[reset]  $pc[rc]%2v$pc[reset]"    

	export PROMPT RPROMPT
	precmd_functions+='prompt_wunjo_precmd'
}

prompt_wunjo_precmd() {
	local ex=$?
	psvar=()

	if [[ $ex -ge 128 ]]; then
		sig=$signals[$ex-127]
		psvar[1]="sig${(L)sig}"
	else
		psvar[1]="$ex"
	fi

    # psvar[2]=$(prompt_mattr_todo '+next')
    psvar[3]=$(prompt_mattr_scm_branch)
    psvar[4]=$(prompt_mattr_scm_changed_staged)
    psvar[5]=$(prompt_mattr_scm_dirty)
    # psvar[6]=$(prompt_mattr_todo '+inbox')
    # psvar[7]=$(prompt_mattr_todo '')
}


prompt_mattr_scm_branch() {
    zgit_isgit || return
    echo "$(zgit_head)"
}

prompt_mattr_scm_changed_staged() {
    zgit_isgit || return
    zgit_inworktree || return

    if ! zgit_isindexclean; then
        echo -n "+"
    fi
}

prompt_mattr_scm_dirty() {
    zgit_isgit || return 
    zgit_inworktree || return

    local -a dirty

    if ! zgit_isworktreeclean; then
        dirty+="!"
    fi

    zgit_hasunmerged && dirty+="*"
    zgit_hasuntracked && dirty+="?"

    echo -n "${(j::)dirty}"
}
    

prompt_wunjo_scm_branch() {
	zgit_isgit || return
	local -A pc
	pc=(${(kv)wunjo_prompt_colors})

	echo -n "$pc[punc]$pc[scm_branch]$(zgit_head)"

	if zgit_inworktree; then
		if ! zgit_isindexclean; then
			echo -n "$pc[scm_status_staged]+"
		fi

		local -a dirty
		if ! zgit_isworktreeclean; then
			dirty+='!'
		fi

		if zgit_hasunmerged; then
			dirty+='*'
		fi

		if zgit_hasuntracked; then
			dirty+='?'
		fi

		if [ $#dirty -gt 0 ]; then
			echo -n "$pc[scm_status_dirty]${(j::)dirty}"
		fi
	fi

	echo $pc[reset]
}

prompt_mattr_setup "$@"

# vim:set ft=zsh:
